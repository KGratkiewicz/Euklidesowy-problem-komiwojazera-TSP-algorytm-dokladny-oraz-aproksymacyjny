# -*- coding: utf-8 -*-
"""Kopia notatnika TSP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pta01oWcae9LquL8p50MDFzLrGbFS9di
"""

import numpy as np
import matplotlib.pyplot as plt
import math
import copy
import itertools as it
from random import randint

def dist(node1, node2):
  xDifSq = node1.point[0]-node2.point[0]
  yDifSq = node1.point[1]-node2.point[1]
  xDifSq = math.pow(xDifSq,2)
  yDifSq = math.pow(yDifSq,2)
  return math.sqrt(xDifSq + yDifSq)

class Node:
  def __init__(self, x, y):
      self.point = [x,y]

class Graph:
  def __init__(self, array):
    self.nodes = array

  def addNodes(self, node):
    self.nodes = np.append(self.nodes, node)

  def removeNode(self, node):
    self.nodes = np.delete(self.nodes, node)

  def plotGraph(self):
      xCoord = []
      yCoord = []
      for node in self.nodes:
        xCoord.append(node.point[0])
        yCoord.append(node.point[1]) 
      plt.grid(True)
      plt.scatter(xCoord,yCoord)

class Hamilton(Graph):
  def __init__(self, graph):
    self.nodes = graph.nodes
    self.addNodes(graph.nodes[0])
    self.distance = 0;
    numElements = len(self.nodes)
    for i in range(1,numElements):
      self.distance += dist(self.nodes[i], self.nodes[(i-1)])

  def plotHamilton(self):
      xCoord = []
      yCoord = []
      for node in self.nodes:
        xCoord.append(node.point[0])
        yCoord.append(node.point[1]) 
      plt.grid(True)
      plt.plot(xCoord,yCoord)
      self.plotGraph()

def brutForceTSP(graph):
  permOfNodes = list(it.permutations(graph.nodes))
  permOfNodes = np.array(permOfNodes)
  minHamilton = Hamilton(Graph(permOfNodes[0]))
  for i in permOfNodes:
    actualHamilton = Hamilton(Graph(i))
    if actualHamilton.distance < minHamilton.distance:
      minHamilton = actualHamilton
  return minHamilton

def generateGraph(numOfNodes = 5, minX = 0, maxX = 100, minY = 0, maxY = 100):
  g = Graph(np.empty(0))
  for i in range(0, numOfNodes):
    x = randint(minX, maxX)
    y = randint(minY, maxY)
    g.addNodes(Node(x,y))
  return g

g = generateGraph(9)
g.plotGraph()
h = brutForceTSP(g)
h.plotHamilton()
print(h.distance)